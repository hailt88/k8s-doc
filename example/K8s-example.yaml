# Service ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-example-service
  labels:
    run: nginx-example
spec:
  ports:
  - port: 80
    protocol: TCP
  selector:
    run: nginx-example
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-example
  labels:
    app: nginx-example
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-example
  template:
    metadata:
      labels:
        app: nginx-example
    spec:
      # Service Account
      serviceAccountName: sa-nginx-example
      # node selector
      nodeName: worker01
      imagePullSecrets:
      - name: regcred
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
        env:
          - name: LOG_LEVEL
            valueFrom:
              configMapKeyRef:
                name: nginx-config
                key: log_level
        # Volume 
        volumeMounts:
        - name: ephemeral
          mountPath: "/tmp"
        - name: secret-volume
          mountPath: /etc/secret-volume
          readOnly: true
        - mountPath: "/usr/share/nginx/html"
          name: task-pv-storage
        # resource request 
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "128Mi"
            cpu: "200m"
            ephemeral-storage: "2Gi"
        # healthcheck 
        livenessProbe:
          httpGet:
            path: /
            port: 80
        readinessProbe:
          httpGet:
            path: /
            port: 80
        # Security 
        securityContext:
          allowPrivilegeEscalation: false
      securityContext:
        runAsUser: 1000
        runAsGroup: 3000
      volumes:
        - name: ephemeral
          emptyDir:
            sizeLimit: 500Mi
        - name: secret-volume
          secret:
            secretName: nginx-secret
        - name: nginx-data
          persistentVolumeClaim:
            claimName: nginx-pv-claim
      # tolerant
      tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: nginx-example-job
spec:
  schedule: "* 1 * * *"
  timeZone: "ETC"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: hello
            image: busybox:1.28
            imagePullPolicy: IfNotPresent
            command:
            - /bin/sh
            - -c
            - date; echo Hello from the Kubernetes cluster > /mnt/nginx-data/index.html
          restartPolicy: OnFailure
---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sa-nginx-example
automountServiceAccountToken: false
---
# Configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  log_level: INFO
---
# secrets
apiVersion: v1
data:
  password: Mzk1MjgkdmRnN0pi
  username: bXktYXBw
kind: Secret
metadata:
  name: nginx-secret

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-example-hpa
spec:
  maxReplicas: 5
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx-example
  targetCPUUtilizationPercentage: 80

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nginx-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/nginx-data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nginx-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
# Docker credential
# kubectl create secret docker-registry regcred --docker-server=<your-registry-server> --docker-username=<your-name> --docker-password=<your-pword> --docker-email=<your-email>
#Role
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: readonly
rules:
- apiGroups:
  - ""
  - "apps"
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
# Role binding
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sa-nginx-readonly
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: readonly
subjects:
- kind: ServiceAccount
  name: default
  namespace: sa-nginx-example

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: nginx-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: nginx-example

